import { BrowserModule } from '@angular/platform-browser';
import { FormlyModule } from '@ngx-formly/core';
import { AngularEditorModule, AngularEditorConfig } from '@kolkov/angular-editor';
import { FormlyBootstrapModule } from '@ngx-formly/bootstrap';
import { NgxMaskModule } from 'ngx-mask'
import { FilterPipe } from '@src/CustomComponents/filter.pipe';
import { NgxCurrencyModule } from "ngx-currency";
import { CurrencyMaskConfig, CURRENCY_MASK_CONFIG } from "ngx-currency/src/currency-mask.config";
import { NgSelectModule } from '@ng-select/ng-select';
import { NumericTextboxModule } from 'ngx-numeric-textbox';
import { BsDatepickerConfig, DatepickerModule, BsDatepickerModule } from 'ngx-bootstrap/datepicker';
import { TranslateModule } from '@ngx-translate/core';
import { AngularSlickgridModule } from 'angular-slickgrid';
import { NgModule } from '@angular/core';
import { ToastrModule } from 'ngx-toastr';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { CookieService } from 'ngx-cookie-service';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { Routes, RouterModule } from '@angular/router';
import { CdkTreeModule } from '@angular/cdk/tree';
import { DragDropModule } from '@angular/cdk/drag-drop';

import {

  MatTreeModule, MatIconModule, MatButtonModule
} from '@angular/material';


import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { NgxSpinnerModule } from 'ngx-spinner';
import { AppComponent } from '@src/app/app.component';
import { NgbModule, NgbActiveModal, NgbModalConfig, NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { NgBootstrapFormValidationModule } from 'ng-bootstrap-form-validation';
import { NavMenuComponent } from '@src/app/nav-menu/nav-menu.component';
import { AuthGuard } from '@src/app/auth.guard';
import { CustomAuthenticationService } from '@src/app/custom-authentication.service';
import { CounterComponent } from '@src/app/counter/counter.component';
import { FetchDataComponent } from '@src/app/fetch-data/fetch-data.component';
import { LoaderComponent } from '@src/app/loader/loader.component';
import { LoaderInterceptorService } from '@src/app/loader-interceptor.service';

import { BreadcrumbComponent } from '@src/app/breadcrumb/breadcrumb.component';
import * as CustomAngularSlickgridModule from '@src/CustomComponents/SlickEditors/CustomAngularSlickgridModule';
import * as Editorngselectcomponent from '@src/CustomComponents/SlickEditors/editor-ng-select.component';
import * as Filterngselectcomponent from '@src/CustomComponents/SlickEditors/filter-ng-select.component';
import * as Logincomponent from '@src/app/login/login.component';
import * as Logoutcomponent from '@src/app/logout/logout.component';
import { LoginTestComponent } from '@src/app/login-test/login-test.component';
import * as Applicationroutes from '@src/app/applicationroutes';

import { AppLoginComponent } from '@src/app/app-login/app-login.component';
import { UserManagementComponent } from '@src/app/user-management/user-management.component';

import { RoleDataAccessComponent } from '@src/app/user-management/role-data-access/role-data-access.component';
import { RoleComponent } from '@src/app/user-management/role/role.component';
import { UserComponent } from '@src/app/user-management/user/user.component';
import { UserDataAccessComponent } from '@src/app/user-management/user-data-access/user-data-access.component';
import { AccountManagementComponent } from '@src/app/account-management/account-management.component';

import { GridComponent } from '@src/app/grid/grid.component';
import { AutoTextFilterComponent } from '@src/app/auto-text-filter/auto-text-filter.component';
import { DataOptionDisplayComponent } from '@src/app/data-option-display/data-option-display.component';
import { CustomGridComponent } from '@src/app/custom-grid/custom-grid.component';
import { LandingPageComponent } from '@src/app/landing-page/landing-page.component';

import { ConfirmationMessageComponent } from '@src/app/confirmation-message/confirmation-message.component';
import { AddressComponent } from '@src/app/address/address.component';
import { AddEditUserComponent } from '@src/app/user-management/add-edit-user/add-edit-user.component';
import { ManageDataAccessComponent } from '@src/app/manage-data-access/manage-data-access.component';

import { FormlyAutoTextComponent } from '@src/app/formly-auto-text/formly-auto-text.component';
import { ButtonTypeComponent } from './button-type/button-type.component';
import { TabsModule } from 'ngx-bootstrap/tabs';
import { AutoGeneratedComponent } from '@src/app/auto-generated/auto-generated.component';
import { AppRoutingModule } from "@src/app/app-routing.module";
import * as MobileComponentLibrary from "@src/app/mobileComponentLibrary";
import * as WebComponentLibrary from "@src/app/webComponentLibrary";
import { AccountComponent } from './account/account.component';
import { AccountDetailComponent } from './account-detail/account-detail.component';
import { AddEditRoleComponent } from './user-management/role/add-edit-role/add-edit-role.component';
import { AddUpdateAccountComponent } from './account-management/add-update-account/add-update-account.component';
import { AddAccountDetailsComponent } from './account-management/add-update-account/add-account-details/add-account-details.component';
import { HomeComponent } from './home/home.component';
import * as FormlyValidations from "@src/app/formlyValidations";

import { BankCardsComponent } from './account/bank-cards/bank-cards.component';
import { FormlyTemplateTypeComponent } from './formly-template-type/formly-template-type.component';

import { DatepickerTypeComponent } from "@src/app/date-picker/DatepickerTypeComponent";

import { AddEditAccountComponent } from './account/add-edit-account/add-edit-account.component';
import * as Dataservice from "@src/app/data.service";
import * as GlobalSettings from "@src/app/GlobalSettings";
 
import { FormlyCurrencyComponent } from './formly-currency/formly-currency.component';
 


export const CustomCurrencyMaskConfig: CurrencyMaskConfig = {
  align: "right",
  allowNegative: false,
  allowZero: true,
  decimal: ".",
  precision: 2,
  prefix: "$",
  suffix: "",
  thousands: ",",
  nullable: true
};
export function ModalConfig(): NgbModalConfig {
  return Object.assign(new NgbModalConfig(), {
    backdrop: 'static', keyboard: false
  });
}


export function getDatepickerConfig(): BsDatepickerConfig {
  return Object.assign(new BsDatepickerConfig(), {
    dateInputFormat: 'DD-MMM-YYYY', showWeekNumbers: false
  });
}
@NgModule({
  declarations: [
    Filterngselectcomponent.FilterNgSelectComponent,
    AppComponent,
    NavMenuComponent,
    CounterComponent,
    FetchDataComponent,
    LoaderComponent,
    BreadcrumbComponent,
    Logincomponent.LoginComponent,
    Logoutcomponent.LogoutComponent,
    LoginTestComponent,
    
    AppLoginComponent,
    UserManagementComponent,
    UserComponent,
    UserDataAccessComponent,
    RoleComponent,
    RoleDataAccessComponent,
    AccountManagementComponent,
    
    GridComponent,
    AutoTextFilterComponent,
    DataOptionDisplayComponent,
    CustomGridComponent,
    LandingPageComponent,
    
    
    ConfirmationMessageComponent,
    AddressComponent,
    AddEditRoleComponent,
    AddEditUserComponent,
    ManageDataAccessComponent,
    FormlyAutoTextComponent,
    AutoGeneratedComponent,
    ButtonTypeComponent,
    FilterPipe,
    AccountComponent,
    AccountDetailComponent,
         HomeComponent,
    DatepickerTypeComponent,
     AddUpdateAccountComponent, AddAccountDetailsComponent,
    
     BankCardsComponent, FormlyTemplateTypeComponent, 
    
    AddEditAccountComponent,
    
    FormlyCurrencyComponent 
  ],
  imports: [
    NgxSpinnerModule,
    AppRoutingModule,
    NgxCurrencyModule,
    NgSelectModule,
    CdkTreeModule,
    MatTreeModule,
    MatIconModule, MatButtonModule,
    AngularEditorModule,
    DragDropModule,
    NgxMaskModule.forRoot(),
    CustomAngularSlickgridModule.CustomAngularSlickgridModule.forRoot(),
    NgBootstrapFormValidationModule.forRoot(),
    AngularSlickgridModule.forRoot(),
    TranslateModule.forRoot(),
    TabsModule.forRoot(),
    NgbModule,
    BsDatepickerModule.forRoot(),
    BrowserAnimationsModule,
    NumericTextboxModule,
    BrowserModule.withServerTransition({ appId: 'ng-cli-universal' }),
    HttpClientModule,
    FormsModule,
    FormlyBootstrapModule,
    FormlyModule.forRoot({

      validationMessages: [
        { name: 'required', message: 'This field is required' },
        { name: 'email', message: 'Email Address is not valid' },
        { name: 'passwordsNotMatching', message: 'Passwords do not match' },
        { name: 'passwordsSameAsOld', message: 'New password can not be same as the current password' },
        { name: 'existingLoginName', message: 'Login Name already exists' },
        { name: 'existingApplicationRoleName', message: 'Application Role Name already exists' },
        { name: 'confirmPassword', message: 'Passwords do not match' },
        { name: 'existingGLAccountCode', message: 'GL Account Code already exists' },
        { name: 'clientAvailability', message: 'Client cannot be associated from the selected entry date' },
        { name: 'existingGLAccount', message: 'GL Account already exists for the selected Account Type and Entity Type' },
        { name: 'existingBankAccount', message: 'Bank Account already exists for the selected BSB and Account Number' },
        { name: 'dateOutofRangeError', message: 'To date must be empty or greater than From date.' },
        { name: 'dateOutofRange', message: 'End/Exit date must be empty or greater than Start/Entry date.' },
      ],
      validators: [
        { name: 'noWhiteSpace', validation: FormlyValidations.noWhitespaceValidator },
        { name: 'emailValidation', validation: FormlyValidations.EmailValidator },
        { name: 'confirmPasswordValidation', validation: FormlyValidations.ConfirmPasswordValidator },
        { name: 'currentAndNewPasswordValidation', validation: FormlyValidations.currentAndNewPasswordValidator }
      ],
      types: [
        { name: 'AutoText', component: FormlyAutoTextComponent },
        { name: 'Address', component: AddressComponent },
        { name: 'Access', component: ManageDataAccessComponent },
        { name: 'template', component: FormlyTemplateTypeComponent },
        { name: 'Currency', component: FormlyCurrencyComponent },

        
        {
          name: 'button',
          component: ButtonTypeComponent,
          wrappers: ['form-field'],
          defaultOptions: {
            templateOptions: {
              btnType: 'default',
              type: 'button',
            }
          }
        }
      ]
    }),
    ReactiveFormsModule,
    ToastrModule.forRoot({
      timeOut: 5000,
      positionClass: 'toast-bottom-right',
      preventDuplicates: false,
    }), // ToastrModule added
    RouterModule.forRoot(Applicationroutes.routes, { useHash: true })
  ],
  providers: [
    NgbActiveModal,
    { provide: BsDatepickerConfig, useFactory: getDatepickerConfig },
    { provide: CURRENCY_MASK_CONFIG, useValue: CustomCurrencyMaskConfig },
    { provide: NgbModalConfig, useFactory: ModalConfig },
    CookieService,
    WebComponentLibrary.WebAuthGuard,
    MobileComponentLibrary.MobileAuthGuard,


    CustomAuthenticationService,
    {
      provide: HTTP_INTERCEPTORS,
      useClass: LoaderInterceptorService,
      multi: true
    }],
  bootstrap: [AppComponent],
  entryComponents: [ AddEditUserComponent, AddEditRoleComponent,
    ConfirmationMessageComponent, 
    AddEditAccountComponent]
})
export class AppModule {
  constructor(private dataService: Dataservice.DataService) {

    this.dataService.GetSystemConfigs().subscribe((configs) => {
      GlobalSettings.GlobalSettings.SystemConfigs = configs;

    });

  }

}
