import { NgModule, NO_ERRORS_SCHEMA } from '@angular/core';
import { NativeScriptModule } from 'nativescript-angular/nativescript.module';

import { AppRoutingModule } from "@src/app/app-routing.module";
import { AppComponent } from '@src/app/app.component';
import { AutoGeneratedComponent } from '@src/app/auto-generated/auto-generated.component';

import { ReactiveFormsModule } from '@angular/forms';
import { FormlyModule } from '@ngx-formly/core';

// Uncomment and add to NgModule imports if you need to use two-way binding
import { NativeScriptFormsModule } from 'nativescript-angular/forms';
import { FormlyNativescriptModule } from '@ngx-formly/nativescript';
import { AuthGuard } from '@src/app/auth.guard';
// Uncomment and add to NgModule imports  if you need to use the HTTP wrapper
import { NativeScriptHttpClientModule } from "nativescript-angular/http-client";

import { LandingPageComponent } from '@src/app/landing-page/landing-page.component';
import { AppLoginComponent } from '@src/app/app-login/app-login.component';
import { ItemsComponent } from "@src/app/native-script-test/items.component";
import { CustomAuthenticationService } from '@src/app/custom-authentication.service';
import { LoaderInterceptorService } from '@src/app/loader-interceptor.service';

import { HTTP_INTERCEPTORS } from '@angular/common/http';
import * as MobileComponentLibrary from "@src/app/mobileComponentLibrary";

@NgModule({
  declarations: [
    AppComponent,
    AutoGeneratedComponent,
    LandingPageComponent,
    AppLoginComponent,
    ItemsComponent,
    ...MobileComponentLibrary.mobileComponents
  ],
  imports: [
    NativeScriptModule,
    AppRoutingModule,
    NativeScriptFormsModule,
    ReactiveFormsModule,
    NativeScriptHttpClientModule,
    FormlyNativescriptModule,
    FormlyModule.forRoot({
      validationMessages: [
        { name: 'required', message: 'This field is required' },
      ],
    }),
  ],
  providers: [MobileComponentLibrary.MobileAuthGuard, CustomAuthenticationService,
    {
      provide: HTTP_INTERCEPTORS,
      useClass: LoaderInterceptorService,
      multi: true
    }],
  bootstrap: [AppComponent],
  schemas: [NO_ERRORS_SCHEMA]
})
/*
Pass your application module to the bootstrapModule function located in main.ts to start your app
*/
export class AppModule { }
